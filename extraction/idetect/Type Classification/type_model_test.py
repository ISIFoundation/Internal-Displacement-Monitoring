# -*- coding: utf-8 -*-
"""Type_Model_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GM12d7F7TNtKzCWk0F3twEo8zlOIonJg
"""

from joblib import dump, load
import numpy as np
import pandas as pd
import nltk
from nltk.stem import WordNetLemmatizer 
import re 
from nltk.corpus import stopwords
from collections import Counter
nltk.download('stopwords')
nltk.download('wordnet')


class Type_Classification_test(object): 
    
    def __init__(self, embedding_model, classification_model, language):
        '''
        The goal of this method is to consume text embedding model and classification model as input and predict whether the given text is relavant to displacement
        @embedding_model(string path of a joblib file): text embedding model, e.g. TF-IDF
        @classification_model (string path of a joblib file): Cause classification model
        @language (string): english/french/spanish   
        '''
        self.embedding_model = embedding_model
        self.classification_model = classification_model
        self.language = language
        self.lemmatizer = WordNetLemmatizer()

    def load_model(self):
        '''
        Load Trained Embedding and Classification models
        '''
        embedding = load(self.embedding_model)
        classification = load(self.classification_model)
        return embedding, classification

    def text_basic_clean(self, text):
        '''
        Remove punctuations,  white space and stop words, lemmatize and lower case each word in the document. 
        @ text: string of a document 
        '''
        text = text.replace('\n\nâ€¢', '').replace('\n\n', '')
        text = re.sub(r'[^\w\s]', '', text) 
        text = text.replace('  ', ' ')
        if self.language == 'english':
            text = ' '.join([self.lemmatizer.lemmatize(word.lower()) for word in text.split() if word not in stopwords.words('english') and word.isalpha()])
        elif self.language == 'french':
            text = ' '.join([self.lemmatizer.lemmatize(word.lower()) for word in text.split() if word not in stopwords.words('french') and word.isalpha()])
        elif self.language == 'spanish':
            text = ' '.join([self.lemmatizer.lemmatize(word.lower()) for word in text.split() if word not in stopwords.words('spanish') and word.isalpha()])
        return text

    def get_embedding_matrix(self, test_text):
        '''
        Text embedding of given document
        @test_test (string or list of string): test document or a list of documents. 
        '''
        embedding = self.load_model()[0]
        if type(test_text) == str:
            test_text = [test_text]
        test_text = [self.text_basic_clean(x) for x in test_text]
        embedding_matrix = embedding.transform(test_text).toarray()
        return embedding_matrix
    
    def predict_proba(self, test_text):
        '''
        Predict the probability of the cause of the displacement. 
        '''
        embedding_matrix = self.get_embedding_matrix(test_text)
        classification = self.load_model()[1]
        prob = classification.predict_proba(embedding_matrix)
        if type(test_text) == str:
            return prob[0]
        return prob
    
    def predict(self, test_text):
        '''
        Predict the label of the cause of the displacement. 
        '''
        embedding_matrix = self.get_embedding_matrix(test_text)
        classification = self.load_model()[1]
        label = classification.predict(embedding_matrix)
        if type(test_text) == str:
            return label[0]
        return label

